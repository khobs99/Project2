/*********************************
 * Person Sorting      Spring 2020     CSC 231
 * Created by Kenneth Hobday
 *********************************/
#include<iostream>
#include<cstdlib>
#include<fstream>
#include<string>
#include<iomanip>

const int CAPACITY = 20;
using namespace std;

#include "Person_KJH.h"

//Names constructor
//Postcondition: First name Last name and age are all initialized to zero

person::person()  
{
	first_name = "";
	last_name = "";
	age = 0;

}
person::person(string first, string last)
{
	first = first_name;
	last = last_name;
}

//Person Destructor
//precondition: Things have been constructed and use dynamic memory
//postcondition: All things using dynamic memory were erased
person::~person()
{

}

//Get member function
//precondition: Data was input through a file
//postcondition: All data from the file was read into an array
bool person::get(istream& in)
{
	in >> first_name >> last_name >> age;
	return(in.good());

}

//Put member function
//precondition: Data is already put into the array
//postcondition: Data is displayed on the screen 
void person::put(ostream& out)
{
	out << first_name << "\t \t" << last_name << "\t \t \t" << age << endl;

}

//< operator overload
//postcondition: < operator now returns true or false based on if last names, first names, and age are less than each other
bool person::operator<(person c1)
{
	if (last_name < c1.last_name)
	{
		return true;
	}
	else if ((last_name == c1.last_name) && first_name < c1.first_name)
	{
		return true;
	}
	else if (((last_name == c1.last_name) && (first_name == c1.first_name)) && age < c1.age)
	{
		return true;
	}
	else
	{
		return false;
	}
}

//> operator overload
//postcondition: > operator now returns true or false based on if last names, first names, and age are greater than each other
bool person::operator>(person c1)
{
	if (last_name > c1.last_name)
	{
		return true;
	}
	else if ((last_name == c1.last_name) && first_name > c1.first_name)
	{
		return true;
	}
	else if (((last_name == c1.last_name) && (first_name == c1.first_name)) && age > c1.age)
	{
		return true;
	}
	else
	{
		return false;
	}
}

//== operator overload
//postcondition: == operator now returns true or false based on if the last names, first names, and age are equal to each other
bool person::operator==(person c1)
{
	if (last_name == c1.last_name)
	{
		return true;
	}
	else if ((last_name == c1.last_name) && first_name == c1.first_name)
	{
		return true;
	}
	else if (((last_name == c1.last_name) && (first_name == c1.first_name)) && age == c1.age)
	{
		return true;
	}
	else
	{
		return false;
	}
}
